version: "3.3"
services:

  proxy:
    image: gcr.io/tutorial-282518/traefik:v2.2
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `fast-api.com`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=traefik-public
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=traefik-public
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.fast-api-com-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.fast-api-com-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.fast-api-com-proxy-http.rule=Host(`dev.fast-api.com`) || Host(`www.dev.fast-api.com`)
        - traefik.http.routers.fast-api-com-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.fast-api-com-proxy-https.rule=Host(`dev.fast-api.com`) || Host(`www.dev.fast-api.com`)
        - traefik.http.routers.fast-api-com-proxy-https.entrypoints=https
        - traefik.http.routers.fast-api-com-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.fast-api-com-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.fast-api-com-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.fast-api-com-www-redirect.redirectregex.regex=^https?://(www.)?(dev.fast-api.com)/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.fast-api-com-www-redirect.redirectregex.replacement=https://dev.fast-api.com/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line 
        - traefik.http.routers.fast-api-com-proxy-https.middlewares=fast-api-com-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: fast-api-com-www-redirect,
        - traefik.http.routers.fast-api-com-proxy-http.middlewares=fast-api-com-www-redirect,fast-api-com-https-redirect

  db:
    image: gcr.io/tutorial-282518/postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - STACK_NAME=fast-api-com

      - TRAEFIK_PUBLIC_NETWORK=traefik-public
      - TRAEFIK_TAG=fast-api.com
      - TRAEFIK_PUBLIC_TAG=traefik-public
      
      - DOCKER_IMAGE_BACKEND=backend
      - DOCKER_IMAGE_CELERYWORKER=celeryworker
      - DOCKER_IMAGE_FRONTEND=frontend
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=changethis
      - POSTGRES_DB=app
      - STACK_NAME=fast-api-com

      - TRAEFIK_PUBLIC_NETWORK=traefik-public
      - TRAEFIK_TAG=fast-api.com
      - TRAEFIK_PUBLIC_TAG=traefik-public
      
      - DOCKER_IMAGE_BACKEND=backend
      - DOCKER_IMAGE_CELERYWORKER=celeryworker
      - DOCKER_IMAGE_FRONTEND=frontend
    deploy:
      placement:
        constraints:
          - node.labels.fast-api-com.app-db-data == true

  pgadmin:
    image: gcr.io/tutorial-282518/pgadmin4
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - PGADMIN_LISTEN_PORT=5050
      - PGADMIN_DEFAULT_EMAIL=admin@fast-api.com
      - PGADMIN_DEFAULT_PASSWORD=changethis
      - STACK_NAME=fast-api-com

      - TRAEFIK_PUBLIC_NETWORK=traefik-public
      - TRAEFIK_TAG=fast-api.com
      - TRAEFIK_PUBLIC_TAG=traefik-public
      
      - DOCKER_IMAGE_BACKEND=backend
      - DOCKER_IMAGE_CELERYWORKER=celeryworker
      - DOCKER_IMAGE_FRONTEND=frontend
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.fast-api-com-pgadmin-http.rule=Host(`pgadmin.dev.fast-api.com`)
        - traefik.http.routers.fast-api-com-pgadmin-http.entrypoints=http
        - traefik.http.routers.fast-api-com-pgadmin-http.middlewares=fast-api-com-https-redirect
        - traefik.http.routers.fast-api-com-pgadmin-https.rule=Host(`pgadmin.dev.fast-api.com`)
        - traefik.http.routers.fast-api-com-pgadmin-https.entrypoints=https
        - traefik.http.routers.fast-api-com-pgadmin-https.tls=true
        - traefik.http.routers.fast-api-com-pgadmin-https.tls.certresolver=le
        - traefik.http.services.fast-api-com-pgadmin.loadbalancer.server.port=5050

  queue:
    image: gcr.io/tutorial-282518/rabbitmq:3
    # Using the below image instead is required to enable the "Broker" tab in the flower UI:
    # image: rabbitmq:3-management
    #
    # You also have to change the flower command
  
  flower:
    image: gcr.io/tutorial-282518/mher/flower
    networks:
      - traefik-public
      - default
    environment:
      - FLOWER_BASIC_AUTH=admin:changethis
    command:
      - "--broker=amqp://guest@queue:5672//"
      # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
      # and change the queue service's image as well
      # - "--broker_api=http://guest:guest@queue:15672/api//"
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.fast-api-com-flower-http.rule=Host(`flower.dev.fast-api.com`)
        - traefik.http.routers.fast-api-com-flower-http.entrypoints=http
        - traefik.http.routers.fast-api-com-flower-http.middlewares=fast-api-com-https-redirect
        - traefik.http.routers.fast-api-com-flower-https.rule=Host(`flower.dev.fast-api.com`)
        - traefik.http.routers.fast-api-com-flower-https.entrypoints=https
        - traefik.http.routers.fast-api-com-flower-https.tls=true
        - traefik.http.routers.fast-api-com-flower-https.tls.certresolver=le
        - traefik.http.services.fast-api-com-flower.loadbalancer.server.port=5555
  
  backend:
    image: 'gcr.io/tutorial-282518/backend:latest'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVER_NAME=dev.fast-api.com
      - SERVER_HOST=https://dev.fast-api.com
      # Allow explicit env var override for tests
      - SMTP_HOST=
      - BACKEND_CORS_ORIGINS=["http://localhost", "http://localhost:4200", "http://localhost:3000", "http://localhost:8080",  "http://dev.fast-api.com", "https://stag.fast-api.com", "https://fast-api.com", "http://local.dockertoolbox.tiangolo.com", "http://localhost.tiangolo.com"]
      - PROJECT_NAME=Fast-API
      - SECRET_KEY=changethis
      - FIRST_SUPERUSER=admin@fast-api.com
      - FIRST_SUPERUSER_PASSWORD=changethis
      - SMTP_TLS=True
      - SMTP_PORT=587
      - SMTP_HOST=
      - SMTP_USER=
      - SMTP_PASSWORD=
      - EMAILS_FROM_EMAIL=info@fast-api.com
      
      - USERS_OPEN_REGISTRATION=False
      
      - SENTRY_DSN=
      - STACK_NAME=fast-api-com

      - TRAEFIK_PUBLIC_NETWORK=traefik-public
      - TRAEFIK_TAG=fast-api.com
      - TRAEFIK_PUBLIC_TAG=traefik-public
      
      - DOCKER_IMAGE_BACKEND=backend
      - DOCKER_IMAGE_CELERYWORKER=celeryworker
      - DOCKER_IMAGE_FRONTEND=frontend
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: 'false'
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=fast-api.com
        - traefik.http.routers.fast-api-com-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
        - traefik.http.services.fast-api-com-backend.loadbalancer.server.port=80
  
  celeryworker:
    image: 'gcr.io/tutorial-282518/celeryworker:latest'
    depends_on:
      - db
      - queue
    environment:
      - SERVER_NAME=dev.fast-api.com
      - SERVER_HOST=https://dev.fast-api.com
      # Allow explicit env var override for tests
      - SMTP_HOST=
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: 'false'
  
  frontend:
    image: 'gcr.io/tutorial-282518/frontend:latest'
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: production
    deploy:
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=fast-api.com
        - traefik.http.routers.fast-api-com-frontend-http.rule=PathPrefix(`/`)
        - traefik.http.services.fast-api-com-frontend.loadbalancer.server.port=80

volumes:
  app-db-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
